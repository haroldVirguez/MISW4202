services:
  # Redis para la cola de mensajería
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Microservicio de Logística/Inventario
  m-logistica-inventario:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: m-logistica-inventario
    entrypoint: ["/usr/local/bin/docker-entrypoint-security.sh"] # TODO - Daniel S
    command: python entrypoints/entrypoint_logistica.py
    # Puerto interno - Solo accesible via API Gateway
    expose:
      - "5002"
    env_file: .env
    environment:
      - FLASK_PORT=5002
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Microservicio Monitor
  m-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: m-monitor
    entrypoint: ["/usr/local/bin/docker-entrypoint-security.sh"] # TODO - Daniel S
    command: python entrypoints/entrypoint_monitor.py
    # Puerto interno - Solo accesible via API Gateway
    expose:
      - "5001"
    env_file: .env
    environment:
      - FLASK_PORT=5001
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
      - m-logistica-inventario
    networks:
      - app-network
    restart: unless-stopped

  # Microservicio Autorizador/Certificador
  m-autorizador:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: m-autorizador
    entrypoint: ["/usr/local/bin/docker-entrypoint-security.sh"] # TODO - Daniel S
    command: python entrypoints/entrypoint_autorizador.py
    expose:
      - "5003"
    env_file: .env
    environment:
      - FLASK_PORT=5003
    volumes:
      - sqlite_data:/data
      - .:/app
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Worker de Celery
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker
    entrypoint: ["/usr/local/bin/docker-entrypoint-security.sh"]
    command: celery -A celery_app.worker.worker_celery worker --loglevel=info -Q celery,logistica,monitor --logfile=/var/log/celery/worker.log
    env_file: .env
    volumes:
      - sqlite_data:/data
      - .:/app
      - ./logs/celery:/var/log/celery
    depends_on:
      - redis
      - m-logistica-inventario
    networks:
      - app-network
    restart: unless-stopped

  # Monitor de Celery (Flower)
  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-flower
    command: celery -A celery_app.worker.worker_celery flower --port=5555
    ports:
      - "5555:5555"  # Flower acceso directo
    env_file: .env
    depends_on:
      - redis
      - celery-worker
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:5555/ >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5

  # Frontend Angular + API Gateway (nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "4200:80"  # Frontend - Solo archivos estáticos
    networks:
      - app-network
    restart: unless-stopped

  # API Gateway dedicado
  api-gateway:
    build:
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:80"  # API Gateway - Punto único para APIs
    depends_on:
      - m-logistica-inventario
      - m-monitor
      - m-autorizador
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost/health >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    

volumes:
  redis_data:
  sqlite_data:

networks:
  app-network:
    driver: bridge